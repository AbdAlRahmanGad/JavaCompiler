PARSER_BEGIN(Java)
import java.io.*;
import java.util.*;

public class Java {
    private static Map<String, String> symbolTable = new HashMap<>();

    public static void printSymbolTable() {
        System.out.println("\n=== Symbol Table ===");
        System.out.println("Variable Name\tType");
        System.out.println("-------------\t----");
        for (Map.Entry<String, String> entry : symbolTable.entrySet()) {
            System.out.println(entry.getKey() + "\t\t\t" + entry.getValue());
        }
        System.out.println("==================\n");
    }

    public static void main(String[] args) {
        Java parser = new Java(System.in);
//        checkTokens(parser);
        try {
            FileReader fileReader = new FileReader("VariableDeclerationParserTest.txt");
            Java.ReInit(fileReader);
            try {
                parser.Statement();
                System.out.println("Parsing completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in VariableDeclerationParserTest.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in VariableDeclerationParserTest.txt: " + e.getMessage());
            }

            fileReader = new FileReader("excepretion.txt");
            Java.ReInit(fileReader);
            try {
                parser.compTest();
                System.out.println("Parsing Comparison completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in excepretion.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in excepretion.txt: " + e.getMessage());
            }

            fileReader = new FileReader("ifElse.txt");
            Java.ReInit(fileReader);
            try {
                parser.IfStatementTest();
                System.out.println("Parsing If Statement completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in ifElse.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in ifElse.txt: " + e.getMessage());
            }

            fileReader = new FileReader("while.txt");
            Java.ReInit(fileReader);
            try {
                parser.testWhile();
                System.out.println("Parsing While Statement completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in while.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in while.txt: " + e.getMessage());
            }

            fileReader = new FileReader("for.txt");
            Java.ReInit(fileReader);
            try {
                parser.ForTest();
                System.out.println("Parsing For Statement completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in for.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in for.txt: " + e.getMessage());
            }

            fileReader = new FileReader("FullProgram.txt");
            Java.ReInit(fileReader);
            try {
                parser.StartProgramAndLibraryImport();
                System.out.println("Parsing Complete Java Program completed successfully!");
                printSymbolTable();
            } catch (ParseException e) {
                System.out.println("Parse error in FullProgram.txt: " + e.getMessage());
                System.out.println("At line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn);
            } catch (TokenMgrError e) {
                System.out.println("Lexical error in FullProgram.txt: " + e.getMessage());
            }

        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + e.getMessage());
        }
    }
    public static void checkTokens (Java parser) {
       try {
         FileReader fileReader = new FileReader("TokensNoIdentifierORNumberTest.txt");
         FileReader fileReader2 = new FileReader("Tokens.txt");
         parser.ReInit(fileReader);
         while (true) {
           Token t = parser.getNextToken();
           if (t.kind == EOF) break;
           System.out.println("Token: " + t.image + ", Kind: " + t.kind);

         }
         parser.ReInit(fileReader2);
           while (true) {
               Token t = parser.getNextToken();
               if (t.kind == EOF)
                   break;
               System.out.printf("Token: %s at line %d, column %d: \"%s\"%n",
                   token.kind,
                   token.beginLine,
                   token.beginColumn,
                   token.image);
           }
       } catch (FileNotFoundException e) {
         System.out.println("File not found");
       }
    }

    public static void addToSymbolTable(String name, String type) {
        symbolTable.put(name, type);
    }
}


PARSER_END(Java)



SKIP : { " " | "\t" | "\n" | "\r" | "  "
| <SINGLE_LINE_COMMENT : "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <MULTI_LINE_COMMENT : "/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}


// Reserved keywords
TOKEN : {

< ABSTRACT : "abstract" >
| < CONTINUE : "continue" >
| < FOR : "for" >
| < NEW : "new" >
| < SWITCH : "switch" >
| < ASSERT : "assert" >
| < DEFAULT_ : "default" >
| < GOTO : "goto" >
| < PACKAGE : "package" >
| < SYNCHRONIZED : "synchronized" >
| < BOOLEAN : "boolean" >
| < DO : "do" >
| < IF : "if" >
| < PRIVATE : "private" >
| < THIS : "this" >
| < BREAK : "break" >
| < DOUBLE : "double" >
| < IMPLEMENTS : "implements" >
| < PROTECTED : "protected" >
| < THROW : "throw" >
| < BYTE : "byte" >
| < ELSE : "else" >
| < IMPORT : "import" >
| < PUBLIC : "public" >
| < THROWS : "throws" >
| < CASE : "case" >
| < ENUM : "enum" >
| < INSTANCEOF : "instanceof" >
| < RETURN : "return" >
| < TRANSIENT : "transient" >
| < CATCH : "catch" >
| < EXTENDS : "extends" >
| < INT : "int" >
| < STRING : "String" >
| < EXCEPTION : "Exception" >
| < SHORT : "short" >
| < TRY : "try" >
| < CHAR : "char" >
| < FINAL : "final" >
| < INTERFACE : "interface" >
| < STATIC : "static" >
| < VOID : "void" >
| < CLASS : "class" >
| < FINALLY : "finally" >
| < LONG : "long" >
| < STRICTFP : "strictfp" >
| < VOLATILE : "volatile" >
| < CONST : "const" >
| < FLOAT : "float" >
| < NATIVE : "native" >
| < SUPER : "super" >
| < WHILE : "while" >
}

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < ARROW: "->" >
| < EQ: "==" >
| < GE: ">=" >
| < LE: "<=" >
| < NE: "!=" >
| < SC_AND: "&&" >
| < SC_OR: "||" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < GT: ">" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >

}

// delimiters
TOKEN : {
    <LPAREN : "(" >
| <RPAREN : ")" >
| <LBRACE : "{" >
| <RBRACE : "}" >
| <LBRACKET : "[" >
| <RBRACKET : "]" >
| <SEMICOLON : ";" >
| <COMMA : "," >
| <DOT : "." >
| <ELLIPSIS : "..." >
| <AT : "@">
| < DOUBLECOLON: "::" >

}

// LITERALS
TOKEN :
{
< FALSE: "false" >
| < CHAR_LITERAL: "'" (~["'","\\","\n","\r"] | "\\" (["n","t","r","\\","'","\""])) "'" >
| < STRING_LITERAL: "\"" (~["\"","\\","\n","\r"] | "\\" (["n","t","r","\\","'","\""]))* "\"" >
 | < FLOAT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<F>)
                   | "." (["0"-"9"])+ (<F>)
                   | (["0"-"9"])+ (<F>) >
| < DOUBLE_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<D>)?
                    | "." (["0"-"9"])+ (<D>)?
                    | (["0"-"9"])+ (<D>)>
| < NON_SEALED: "non-sealed" >
| < NULL: "null" >
| < PERMITS: "permits">
| < RECORD: "record" >
| < SEALED: "sealed" >
| < TRUE: "true" >
| < REQUIRES: "requires" >
| < TO: "to" >
| < WITH: "with" >
| < OPEN: "open" >
| < OPENS: "opens" >
| < USES: "uses" >
| < MODULE: "module" >
| < EXPORTS: "exports" >
| < PROVIDES: "provides" >
| < TRANSITIVE: "transitive" >
| < WHEN: "when" >
}

/// Identifiers
TOKEN : {
 <DIGIT : [ "0"-"9" ]>
| <ID : ( <LETTER> | "_" ) ( <LETTER> | <DIGIT> | "_" )*>
| <LETTER : [ "a"-"z", "A"-"Z" ]>
}

MORE : {
< F : ("f" | "F") >
| < D : ("d" | "D") >
}

void StartProgramAndLibraryImport() : {}
{
    (ImportDeclaration())*
    ClassDeclarationAndBody()
    <EOF>
}

void ImportDeclaration() : {}
{
    <IMPORT> ImportName() <SEMICOLON>
}

void ImportName() : {}
{
    <ID> (<DOT> <ID>)*
}

void ClassDeclarationAndBody() : {}
{
    [<PUBLIC> | <PROTECTED> | <PRIVATE>] 
    <CLASS> <ID> 
    [<IMPLEMENTS> InheritedList()]
    <LBRACE>
        (ClassMember())*
    <RBRACE>
}

void ClassMember() : {}
{
    (
        LOOKAHEAD(3)
        FieldDeclaration() |
        MethodDeclaration()
    )
}

void FieldDeclaration() : {}
{
    [<PUBLIC> | <PROTECTED> | <PRIVATE>]
    [<STATIC>]
    VariableDeclarationWithNoSemicolon() (<COMMA> VariableDeclarationAfterComma() )* <SEMICOLON>
}

void InheritedList() : {}
{
    ImportName() (<COMMA> ImportName())*
}

void MethodDeclaration() : {}
{
    [<PUBLIC> | <PROTECTED> | <PRIVATE>]
    [<STATIC>]
    (
        <VOID> |
        <INT> |
        <DOUBLE> |
        <CHAR> |
        <STRING> |
        <FLOAT> |
        <BOOLEAN>
    )
    <ID> <LPAREN> [ParameterList()] <RPAREN>
    <LBRACE>
        (Statement())
    <RBRACE>
}

void ParameterList() : {}
{
    Parameter() (<COMMA> Parameter())*
}

void Parameter() :
{
    Token type;
    Token name;
}
{
    (
        type=<INT> |
        type=<DOUBLE> |
        type=<CHAR> |
        type=<STRING> |
        type=<FLOAT> |
        type=<BOOLEAN>
    )
    [<LBRACKET> <RBRACKET>]
    name=<ID>
    {
        String typeStr = type.image;
        if (getToken(1).kind == 97) {
            typeStr += "[]";
        }
        addToSymbolTable(name.image, typeStr);
    }
}

void Statement() : {}
{
    (LOOKAHEAD(3)
        VariableDeclaration() |
        Assignment() |
        IfStatement() |
        WhileStatement() |
        ForStatement() |
        LOOKAHEAD(2)
        <ID> NoIDIncrementDecrement() <SEMICOLON>|
        <ID> noIDAssignmentWithNoSemicolon() <SEMICOLON> |
        IncrementDecrement() <SEMICOLON> |
        LOOKAHEAD(3)
                BreakStatement() |
                ContinueStatement() |
                ObjectCreation()
    )*
}

void nestedStatement() : {}
{
    (LOOKAHEAD(4)
        VariableDeclaration() |
        Assignment() |
        WhileStatement() |
        IfStatement() |
        ForStatement() |
        LOOKAHEAD(2)
        <ID> NoIDIncrementDecrement() <SEMICOLON>|
        <ID> noIDAssignmentWithNoSemicolon() <SEMICOLON> |
        IncrementDecrement() <SEMICOLON> |
        LOOKAHEAD(3)
                BreakStatement() |
                ContinueStatement() |
                ObjectCreation()
    )
}

void BreakStatement() : {}
{
    <BREAK> <SEMICOLON>
}

void ContinueStatement() : {}
{
    <CONTINUE> <SEMICOLON>
}

void ObjectCreation() : {}
{
    <ID> <ID> <ASSIGN> <NEW> <ID> <LPAREN> [ArgumentList()] <RPAREN> <SEMICOLON>
}

void ArgumentList() : {}
{
    Expression() (<COMMA> Expression())*
}

void testWhile() : {}
{
    (WhileStatement())*
    <EOF>
}
void WhileStatement() : {}
{
    <WHILE> <LPAREN> Expression() <RPAREN>
     (nestedStatement() | <LBRACE> (nestedStatement())* <RBRACE>)
}

void ForTest() : {}
{
    (ForStatement())*
    <EOF>
}

void ForStatement() : {}
{

    <FOR> <LPAREN>
        (ForInit())? <SEMICOLON>
        (Expression())? <SEMICOLON>
        (ForUpdate())?
    <RPAREN>
    (<LBRACE> (nestedStatement())* <RBRACE> | nestedStatement())
}


void ForInit() : {}
{
    LOOKAHEAD(2)
    VariableDeclarationWithNoSemicolon()
    (<COMMA> VariableDeclarationAfterComma() | AssignmentWithNoSemicolon())*
    |
    AssignmentWithNoSemicolon()
    (<COMMA> AssignmentWithNoSemicolon())*
}

void ForUpdate() : {}
{
    LOOKAHEAD(2)
    AssignmentWithNoSemicolon() |
    IncrementDecrement()
    (<COMMA> IncrementDecrement() | AssignmentWithNoSemicolon())*
}

void NoIDIncrementDecrement() : {}
{
    (<INCR> | <DECR>) |
(
        <PLUSASSIGN> |
        <MINUSASSIGN> |
        <STARASSIGN> |
        <SLASHASSIGN> |
        <ANDASSIGN> |
        <ORASSIGN> |
        <XORASSIGN> |
        <REMASSIGN> |
        <LSHIFTASSIGN> |
        <RSIGNEDSHIFTASSIGN> |
        <RUNSIGNEDSHIFTASSIGN>
    ) MathExpressionForLoop()
}

void IncrementDecrement() : {}
{
    LOOKAHEAD(3)
    <ID> (<INCR> | <DECR>) |
    (<INCR> | <DECR>) <ID> |
    <ID> (
        <PLUSASSIGN> |
        <MINUSASSIGN> |
        <STARASSIGN> |
        <SLASHASSIGN> |
        <ANDASSIGN> |
        <ORASSIGN> |
        <XORASSIGN> |
        <REMASSIGN> |
        <LSHIFTASSIGN> |
        <RSIGNEDSHIFTASSIGN> |
        <RUNSIGNEDSHIFTASSIGN>
    ) MathExpressionForLoop()
}

void VariableDeclarationWithNoSemicolon() : 
{
    Token type;
    Token name;
}
{
    (
        type=<INT> |
        type=<DOUBLE> |
        type=<CHAR> |
        type=<STRING> |
        type=<FLOAT> |
        type=<BOOLEAN>
    )
    name=<ID>
    {
        addToSymbolTable(name.image, type.image);
    }
    [<ASSIGN> Expression()]
}

void VariableDeclarationAfterComma() : {}
{
    Identifier()
    [<ASSIGN> Expression()]
}

void AssignmentWithNoSemicolon() : {}
{
    <ID> <ASSIGN> Expression()
}

void noIDAssignmentWithNoSemicolon() : {}
{
    <ASSIGN> Expression()
}

void IfStatementTest() : {}
{
   (IfStatement())*
   <EOF>
}

void compTest() : {}
{
    (Expression())*
    <EOF>
}

void IfStatement() : {}
{
    <IF> <LPAREN> Expression() <RPAREN>
     ( <LBRACE> (nestedStatement())* <RBRACE> | nestedStatement())
     (LOOKAHEAD(3)<ELSE> (<LBRACE> (nestedStatement())* <RBRACE> | nestedStatement()))?
}

void MathExpression() : {}
{
    Term() ( <PLUS> Term() | <MINUS> Term() )*
}

void Term() : {}
{
    Factor() (<STAR> Factor() | <SLASH> Factor())*
}

void Factor() : {}
{
    Digits() |
    <DOUBLE_LITERAL> |
    <FLOAT_LITERAL> |
    <CHAR_LITERAL> |
    <STRING_LITERAL> |
    <TRUE> |
    <FALSE> |
    <LPAREN> Expression() <RPAREN> |
    <ID>
}

void MathExpressionForLoop() : {}
{
    TermForLoop() ( <PLUS> TermForLoop() | <MINUS> TermForLoop() )*
}

void TermForLoop() : {}
{
    FactorForLoop() (<STAR> FactorForLoop() | <SLASH> FactorForLoop())*
}

void FactorForLoop() : {}
{
    Digits() |
    <DOUBLE_LITERAL> |
    <FLOAT_LITERAL> |
    <CHAR_LITERAL> |
    <STRING_LITERAL> |
    <TRUE> |
    <FALSE> |
    <LPAREN> MathExpressionForLoop() <RPAREN> |
    <ID>
}

void Expression() : {}
{
    ComparisonExpression() ( LOOKAHEAD(3) <SC_AND> Expression() |
    <SC_OR> Expression())*
}

void ComparisonExpression() : {}
{
    MathExpression() (
        <EQ> MathExpression() |
        <NE> MathExpression() |
        <LT> MathExpression() |
        <GT> MathExpression() |
        <LE> MathExpression() |
        <GE> MathExpression()
    )*
}

void VariableDeclaration() :
{
    Token type;
    Token name;
}
{
    (
        type=<INT> |
        type=<DOUBLE> |
        type=<CHAR> |
        type=<STRING> |
        type=<FLOAT> |
        type=<BOOLEAN>
    )
    name=<ID>
    {
        addToSymbolTable(name.image, type.image);
    }
    <SEMICOLON>
}

void Assignment() : 
{
    Token type;
    Token name;
}
{
    (
        type=<STRING> name=<ID> <ASSIGN> (LOOKAHEAD(2)(MathExpression())+ | <STRING_LITERAL> ) |
        type=<CHAR> name=<ID> <ASSIGN> (<CHAR_LITERAL>| Identifier()) |
        type=<INT> name=<ID> <ASSIGN> (LOOKAHEAD(3)Digits() | (MathExpression())+) |
        type=<DOUBLE> name=<ID> <ASSIGN> (LOOKAHEAD(2)<DOUBLE_LITERAL> | (MathExpression())+) |
        type=<FLOAT> name=<ID> <ASSIGN> (LOOKAHEAD(2)<FLOAT_LITERAL>  | (MathExpression())+) |
        type=<BOOLEAN> name=<ID> <ASSIGN> (LOOKAHEAD(2)<TRUE> | <FALSE> | (Expression() )+)
    )
    {
        addToSymbolTable(name.image, type.image);
    }
    <SEMICOLON>
}

void Digits() : {}
{
    (<DIGIT>)+
}

void Identifier() : {}
{
  <ID>
}